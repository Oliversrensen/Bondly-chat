generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  email            String?          @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  gender           Gender           @default(Undisclosed)
  stripeCustomerId String?          @unique
  image            String?
  name             String?
  isPro            Boolean          @default(false)
  sillyName        String?
  emailVerified    DateTime?
  isAdmin          Boolean          @default(false)
  profilePicture   String?          // URL for uploaded profile picture
  profilePictureType String?        // 'uploaded' or 'generated'
  generatedAvatar  String?          // For storing generated avatar data
  selectedAvatarId String?          // ID of selected preset avatar
  Account          Account[]
  blocksReceived   Block[]          @relation("blocked")
  blocksInitiated  Block[]          @relation("blocker")
  interests        InterestOnUser[]
  matchesInitiated Match[]          @relation("initiator")
  matchesJoined    Match[]          @relation("joiner")
  messages         Message[]
  reports          Report[]         @relation("reportsByUser")
  Session          Session[]
  subscriptions    Subscription[]
  friendsInitiated Friend[]         @relation("friendRequester")
  friendsReceived  Friend[]         @relation("friendReceiver")
  friendMessages   FriendMessage[]  @relation("friendMessageAuthor")
}

model Interest {
  id    Int              @id @default(autoincrement())
  name  String           @unique
  users InterestOnUser[]
}

model InterestOnUser {
  userId     String
  interestId Int
  weight     Int      @default(1)
  interest   Interest @relation(fields: [interestId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, interestId])
}

model Match {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  endedAt     DateTime?
  initiatorId String
  joinerId    String
  mode        String
  roomId      String    @unique
  initiator   User      @relation("initiator", fields: [initiatorId], references: [id])
  joiner      User      @relation("joiner", fields: [joinerId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  authorId  String
  text      String
  roomId    String
  author    User     @relation(fields: [authorId], references: [id])
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String
  status           String
  priceId          String
  currentPeriodEnd DateTime
  user             User     @relation(fields: [userId], references: [id])
}

model Block {
  id        String   @id @default(cuid())
  blockerId String
  blockedId String
  createdAt DateTime @default(now())
  blocked   User     @relation("blocked", fields: [blockedId], references: [id])
  blocker   User     @relation("blocker", fields: [blockerId], references: [id])
}

model Report {
  id             String   @id @default(cuid())
  reporterId     String
  reportedUserId String
  reason         String
  createdAt      DateTime @default(now())
  reporter       User     @relation("reportsByUser", fields: [reporterId], references: [id])
}

model Friend {
  id          String   @id @default(cuid())
  requesterId String
  receiverId  String
  status      FriendStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  requester   User     @relation("friendRequester", fields: [requesterId], references: [id])
  receiver    User     @relation("friendReceiver", fields: [receiverId], references: [id])
  messages    FriendMessage[]

  @@unique([requesterId, receiverId])
}

model FriendMessage {
  id        String   @id @default(cuid())
  authorId  String
  friendId  String
  text      String
  createdAt DateTime @default(now())
  author    User     @relation("friendMessageAuthor", fields: [authorId], references: [id])
  friend    Friend   @relation(fields: [friendId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

enum Gender {
  Male
  Female
  Undisclosed
}

enum FriendStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}
